(ns tufdown.block-test
  (:require [tufdown.block :refer :all]
            [clojure.test :refer :all]))

(deftest parse-test
  (testing "구분줄"
    (are [시도 결과] (= 시도 결과)
      (parse "---\n제목\n---\n")
      [:문서 [:구분줄] [:작은제목 [:문장 "제목"]]]

      (parse "- - -\n") [:문서 [:구분줄]]

      (parse "***\n") [:문서 [:구분줄]]

      (parse "* * *\n") [:문서 [:구분줄]]

      (parse "__________\n") [:문서 [:구분줄]]))

  (testing "각주"
    (are [시도 결과] (= 시도 결과)
      (parse "[각주링크]: http://test.com\n")
      [:문서 [:각주링크 [:각주이름 "각주링크"]
              [:각주주소 "http://test.com"]]]

      (parse "[각주링크]: http://test.com?test=t#123   \"링크 설명\"\n")
      [:문서 [:각주링크
              [:각주이름 "각주링크"]
              [:각주주소 "http://test.com?test=t#123"]
              [:링크타이틀 "링크 설명"]]]))

  (testing "소스코드"
    (are [시도 결과] (= 시도 결과)
      (parse "``` clojure\n(def a 1)\n```\n")
      [:문서 [:소스코드
              [:소스언어 "clojure"]
              [:소스내용 "(def a 1)" "\n"]]]

      (parse "```\n(def a 1)\n```\n")
      [:문서 [:소스코드 [:소스내용 "(def a 1)" "\n"]]]

      (parse "```clojure\n(def a 1)\n```\n그리고\n\n```\n한번더\n```\n")
      [:문서
       [:소스코드 [:소스언어 "clojure"]
        [:소스내용 "(def a 1)" "\n"]]
       [:문단 [:문장 "그리고"]]
       [:소스코드 [:소스내용 "한번더" "\n"]]]))

  (testing "원문"
    (are [시도 결과] (= 시도 결과)
      (parse "    원문 텍스트는 줄넘김\n    문자도 유지\n")
      [:문서 [:원문 "원문 텍스트는 줄넘김" "\n"
              "문자도 유지" "\n"]]))

  (testing "인용"
    (are [시도 결과] (= 시도 결과)
      (parse "> 짜라투스트라는 *이렇게* 말했다\n")
      [:문서 [:인용 [:문장 "짜라투스트라는 *이렇게* 말했다"]]]

      (parse "> 한줄\n> 두줄\n평문\n")
      [:문서 [:인용 [:문장 "한줄"] [:문장 "두줄"]] [:문단 [:문장 "평문"]]]

      (parse "> 첫줄\n>\n> 다음\n")
      [:문서 [:인용 [:문장 "첫줄"] [:빈줄] [:문장 "다음"]]]))

  (testing "목록"
    (are [시도 결과] (= 시도 결과)
      (parse "* 일반목록\n* 다음\n")
      [:문서 [:일반목록 [:항목 [:문장 "일반목록"]] [:항목 [:문장 "다음"]]]]

      (parse "* 첫번째\n  첫째이어서\n* 두번째\n")
      [:문서 [:일반목록
              [:항목 [:문장 "첫번째"] [:문장 "첫째이어서"]]
              [:항목 [:문장 "두번째"]]]]

      (parse "1. 첫번째\n2. 두번째\n")
      [:문서 [:숫자목록 [:항목 [:문장 "첫번째"]] [:항목 [:문장 "두번째"]]]]

      (parse "1. 첫번째\n  이어서\n2. 두번째\n")
      [:문서 [:숫자목록
              [:항목 [:문장 "첫번째"] [:문장 "이어서"]]
              [:항목 [:문장 "두번째"]]]]))

  (testing "제목"
    (are [시도 결과] (= 시도 결과)
      (parse "# 큰제목\n")
      [:문서 [:큰제목 [:문장 "큰제목"]]]

      (parse "## 작은제목\n")
      [:문서 [:작은제목 [:문장 "작은제목"]]]

      (parse "# **강조**제목\n다음\n")
      [:문서
       [:큰제목 [:문장 "**강조**제목"]]
       [:문단 [:문장 "다음"]]]

      (parse "큰 제목\n=====\n일반문단\n")
      [:문서 [:큰제목 [:문장 "큰 제목"]] [:문단 [:문장 "일반문단"]]]

      (parse "작은 제목\n---\n일반문단\n")
      [:문서 [:작은제목 [:문장 "작은 제목"]] [:문단 [:문장 "일반문단"]]]))

  (testing "문단"
    (are [시도 결과] (= 시도 결과)
      (parse "\n")
      [:문서 [:문단]]

      (parse "문장 하나\n문장 둘.\n\n")
      [:문서 [:문단 [:문장 "문장 하나"] [:문장 "문장 둘."]]]

      (parse "문단 하나\n\n문단 둘.\n")
      [:문서 [:문단 [:문장 "문단 하나"]] [:문단 [:문장 "문단 둘."]]]))

  (testing "문서전체"
    (is (= (parse
            "# 큰제목
## 작은제목
첫문단

* 항목1
* 항목2 *강조*

``` 클로저
(defn a-func []
  true)
```
마지막 문단
")
           [:문서
            [:큰제목 [:문장 "큰제목"]]
            [:작은제목 [:문장 "작은제목"]]
            [:문단 [:문장 "첫문단"]]
            [:일반목록 [:항목 [:문장 "항목1"]]
             [:항목 [:문장 "항목2 *강조*"]]]
            [:소스코드 [:소스언어 "클로저"]
             [:소스내용 "(defn a-func []" "\n"
              "  true)" "\n"]]
            [:문단 [:문장 "마지막 문단"]]])))
  (testing "성능"
    (let [text (slurp "public/sample.md")]
      (time (parse text)))))
