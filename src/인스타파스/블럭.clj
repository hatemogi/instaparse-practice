(ns 인스타파스.블럭
  (:require [instaparse.core :as insta]
            [clojure.test :refer :all]))

(def 파서
  (insta/parser
   "문서         := (블럭 / 각주 / 문단)+
    <블럭>       := 구분줄 / 제목 / 목록 / 인용 / 원문 / 소스코드

    (* 제목 *)
    <제목>       := 일반제목 <LF> / 밑줄제목
    <일반제목>   := <'##' 공백> 작은제목 <공백? '#'+>? / <'#' 공백> 큰제목 <공백? '#'+>?
    <밑줄제목>   := 큰제목 <LF '='+ LF> / 작은제목 <LF '-'+ LF>
    큰제목       := 문장
    작은제목     := 문장

    (* 목록 *)
    <목록>       := 일반목록 / 숫자목록
    일반목록     := (일반마커 항목 <LF>)+ <LF>?
    숫자목록     := (숫자마커 항목 <LF>)+ <LF>?
    <일반마커>   := <공백? 공백? 공백? ('*' | '+' | '-') 공백+>
    <숫자마커>   := <공백? 공백? 공백? 숫자+ '.' 공백+>
    항목         := 문장 (<LF> !(빈줄 | 일반마커 | 숫자마커) <#'[ ]*'> 문장)*

    (* 인용 *)
    인용         := (<'>' 공백?> (빈줄 / 문장 <LF>))+

    (* 원문 *)
    원문         := (<공백4> ANY* LF)+

    (* 소스코드 *)
    소스코드     := <\"```\" 공백*> (<LF> 코드내용 / 소스언어 <LF> 코드내용) <\"```\" LF LF?>
    소스언어     := ANY+
    코드내용     := (ANY+ LF)*

    (* 구분줄 *)
    구분줄       := <공백* LF 구분줄표시 LF>
    구분줄표시   := #'(- ?){3,}' / #'(\\* ?){3,}' / #'(_ ?){3,}'

    (* 각주 *)
    <각주>       := 각주링크
    각주링크     := <'['> 각주이름 <']:' 공백+> 각주주소 링크타이틀? <LF>
    각주이름     := ANY+
    각주주소     := (!공백 ANY)+
    링크타이틀   := <공백+ '\"'> (!'\"' ANY)+ <'\"'>

    (* 문단 *)
    문단         := (문장 <LF> / 빈줄)* <LF>?
    빈줄         := 공백* <LF>
    문장         := ANY+
    <ANY>        := #'.'
    공백         := #' '
    공백4        := 공백 공백 공백 공백
    <LF>         := '\\n'
    <숫자>       := #'[0-9]'
   "))

(defn 분석 [텍스트 & 옵션]
  (apply 파서
         (cons (if (clojure.string/ends-with? 텍스트 "\n")
                 텍스트
                 (str 텍스트 "\n"))
               옵션)))

(deftest 분석테스트
  (testing "구분줄"
    (are [시도 결과] (= 시도 결과)
      (분석 "\n---\n제목\n---")
      [:문서 [:구분줄] [:작은제목 [:문장 "제" "목"]]]

      (분석 "\n- - -\n") [:문서 [:구분줄]]

      (분석 "\n***\n") [:문서 [:구분줄]]

      (분석 "\n* * *\n") [:문서 [:구분줄]]

      (분석 "\n___________\n") [:문서 [:구분줄]]))

  (testing "각주"
    (are [시도 결과] (= 시도 결과)
      (분석 "[각주링크]: http://test.com")
      [:문서 [:각주링크 [:각주이름 "각" "주" "링" "크"]
              [:각주주소 "h" "t" "t" "p" ":" "/" "/" "t" "e" "s" "t" "." "c" "o" "m"]]]

      (분석 "[각주링크]: http://test.com?test=t#123   \"링크 설명\"")
      [:문서 [:각주링크
              [:각주이름 "각" "주" "링" "크"]
              [:각주주소 "h" "t" "t" "p" ":" "/" "/" "t" "e" "s" "t" "." "c" "o" "m" "?" "t" "e" "s" "t" "=" "t" "#" "1" "2" "3"]
              [:링크타이틀 "링" "크" " " "설" "명"]]]))

  (testing "소스코드"
    (are [시도 결과] (= 시도 결과)
      (분석 "``` clojure\n(def a 1)\n```")
      [:문서 [:소스코드
              [:소스언어 "c" "l" "o" "j" "u" "r" "e"]
              [:코드내용 "(" "d" "e" "f" " " "a" " " "1" ")" "\n"]]]

      (분석 "```\n(def a 1)\n```")
      [:문서 [:소스코드 [:코드내용 "(" "d" "e" "f" " " "a" " " "1" ")" "\n"]]]

      (분석 "```clojure\n(def a 1)\n```\n그리고\n\n```\n한번더\n```")
      [:문서
       [:소스코드 [:소스언어 "c" "l" "o" "j" "u" "r" "e"]
        [:코드내용 "(" "d" "e" "f" " " "a" " " "1" ")" "\n"]]
       [:문단 [:문장 "그" "리" "고"]]
       [:소스코드 [:코드내용 "한" "번" "더" "\n"]]]))

  (testing "원문"
    (are [시도 결과] (= 시도 결과)
      (분석 "    원문 텍스트는 줄넘김\n    문자도 유지")
      [:문서 [:원문 "원" "문" " " "텍" "스" "트" "는" " "
              "줄" "넘" "김" "\n" "문" "자" "도" " " "유" "지" "\n"]]))

  (testing "인용"
    (are [시도 결과] (= 시도 결과)
      (분석 "> 짜라투스트라는 *이렇게* 말했다")
      [:문서 [:인용 [:문장 "짜" "라" "투" "스" "트" "라" "는" " " "*" "이" "렇" "게" "*" " " "말" "했" "다"]]]

      (분석 "> 한줄\n> 두줄\n평문")
      [:문서 [:인용 [:문장 "한" "줄"] [:문장 "두" "줄"]] [:문단 [:문장 "평" "문"]]]

      (분석 "> 첫줄\n>\n> 다음")
      [:문서 [:인용 [:문장 "첫" "줄"] [:빈줄] [:문장 "다" "음"]]]))

  (testing "목록"
    (are [시도 결과] (= 시도 결과)
      (분석 "* 일반목록\n* 다음\n")
      [:문서 [:일반목록 [:항목 [:문장 "일" "반" "목" "록"]] [:항목 [:문장 "다" "음"]]]]

      (분석 "* 첫번째\n  첫째이어서\n* 두번째")
      [:문서 [:일반목록
              [:항목 [:문장 "첫" "번" "째"] [:문장 "첫" "째" "이" "어" "서"]]
              [:항목 [:문장 "두" "번" "째"]]]]

      (분석 "1. 첫번째\n2. 두번째\n")
      [:문서 [:숫자목록 [:항목 [:문장 "첫" "번" "째"]] [:항목 [:문장 "두" "번" "째"]]]]

      (분석 "1. 첫번째\n  이어서\n2. 두번째\n")
      [:문서 [:숫자목록
              [:항목 [:문장 "첫" "번" "째"] [:문장 "이" "어" "서"]]
              [:항목 [:문장 "두" "번" "째"]]]]))

  (testing "제목"
    (are [시도 결과] (= 시도 결과)
      (분석 "# 큰제목")
      [:문서 [:큰제목 [:문장 "큰" "제" "목"]]]

      (분석 "# 큰제목 ####")
      [:문서 [:큰제목 [:문장 "큰" "제" "목"]]]

      (분석 "## 작은제목")
      [:문서 [:작은제목 [:문장 "작" "은" "제" "목"]]]

      (분석 "## 작은제목 #")
      [:문서 [:작은제목 [:문장 "작" "은" "제" "목"]]]

      (분석 "# **강조**제목\n다음")
      [:문서
       [:큰제목 [:문장 "*" "*" "강" "조" "*" "*" "제" "목"]]
       [:문단 [:문장 "다" "음"]]]

      (분석 "큰 제목\n=====\n일반문단")
      [:문서 [:큰제목 [:문장 "큰" " " "제" "목"]] [:문단 [:문장 "일" "반" "문" "단"]]]

      (분석 "작은 제목\n---\n일반문단")
      [:문서 [:작은제목 [:문장 "작" "은" " " "제" "목"]] [:문단 [:문장 "일" "반" "문" "단"]]]))

  (testing "문단"
    (are [시도 결과] (= 시도 결과)
      (분석 "")
      [:문서 [:문단]]

      (분석 "문장 하나\n문장 둘.\n\n")
      [:문서 [:문단 [:문장 "문" "장" " " "하" "나"] [:문장 "문" "장" " " "둘" "."]]]

      (분석 "문단 하나\n\n문단 둘.\n")
      [:문서 [:문단 [:문장 "문" "단" " " "하" "나"]] [:문단 [:문장 "문" "단" " " "둘" "."]]]))

  (testing "문서전체"
    (is (= (분석
            "# 큰제목
## 작은제목
첫문단

* 항목1
* 항목2 *강조*

``` 클로저
(defn a-func []
  true)
```
마지막 문단
")
           [:문서
            [:큰제목 [:문장 "큰" "제" "목"]]
            [:작은제목 [:문장 "작" "은" "제" "목"]]
            [:문단 [:문장 "첫" "문" "단"]]
            [:일반목록 [:항목 [:문장 "항" "목" "1"]]
             [:항목 [:문장 "항" "목" "2" " " "*" "강" "조" "*"]]]
            [:소스코드 [:소스언어 "클" "로" "저"]
             [:코드내용 "(" "d" "e" "f" "n" " " "a" "-" "f" "u" "n" "c" " " "[" "]" "\n" " " " " "t" "r" "u" "e" ")" "\n"]]
            [:문단 [:문장 "마" "지" "막" " " "문" "단"]]]))))
